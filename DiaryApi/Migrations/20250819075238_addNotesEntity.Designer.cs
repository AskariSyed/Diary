// <auto-generated />
using System;
using DiaryApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiaryApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250819075238_addNotesEntity")]
    partial class addNotesEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiaryApi.Models.Diary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Diaries");
                });

            modelBuilder.Entity("DiaryApi.Models.DiaryTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("DiaryTasks");
                });

            modelBuilder.Entity("DiaryApi.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiaryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiaryId")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("DiaryApi.Models.Page", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PageId"));

                    b.Property<int>("DiaryNo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PageDate")
                        .HasColumnType("date");

                    b.HasKey("PageId");

                    b.HasIndex("DiaryNo");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("DiaryApi.Models.PageTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PageId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentTaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("ParentTaskId");

                    b.ToTable("PageTasks");
                });

            modelBuilder.Entity("DiaryApi.Models.Note", b =>
                {
                    b.HasOne("DiaryApi.Models.Diary", "Diary")
                        .WithOne("Note")
                        .HasForeignKey("DiaryApi.Models.Note", "DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diary");
                });

            modelBuilder.Entity("DiaryApi.Models.Page", b =>
                {
                    b.HasOne("DiaryApi.Models.Diary", "Diary")
                        .WithMany("Pages")
                        .HasForeignKey("DiaryNo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diary");
                });

            modelBuilder.Entity("DiaryApi.Models.PageTask", b =>
                {
                    b.HasOne("DiaryApi.Models.Page", "Page")
                        .WithMany("PageTasks")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiaryApi.Models.DiaryTask", "ParentTask")
                        .WithMany("PageTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("DiaryApi.Models.Diary", b =>
                {
                    b.Navigation("Note")
                        .IsRequired();

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("DiaryApi.Models.DiaryTask", b =>
                {
                    b.Navigation("PageTasks");
                });

            modelBuilder.Entity("DiaryApi.Models.Page", b =>
                {
                    b.Navigation("PageTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
